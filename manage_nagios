#!/usr/bin/python3
import argparse
import time
import glob

# can I grab this from nagios.cfg?
cfg_path = '/local/nagios/etc/objects/'
host_group_path = ''  # cfg_path + 'hostgroups/'

# build the parser
parser = argparse.ArgumentParser(description='stop things from alarming')
parser.add_argument('--version', '-v', action='version', version='%(prog)s 1.0')
parser.add_argument('--hosts', '-H', help='host(s) or host group to put in downtime', required=True)
parser.add_argument('--services', '-S', help='service names to put in downtime')
parser.add_argument('--user', '-U', type=str, help='your username', required=True)
# parser.add_argument('--start', help='The time you would like downtime to start')
# parser.add_argument('--end', help='the time you would like downtime to end')
parser.add_argument('--duration', '-D', type=int, default=7200, help='duration of time to be in downtime')
parser.add_argument('--comment', '-C', help='add a comment so others know what you are working on', required=True)

args = parser.parse_args()
h_groups = []
hg_members = []

for files in glob.glob(host_group_path + '*.cfg'):
    with open(files) as f:
        for line in f:
            if 'hostgroup_name' in line:
                h_groups.append(line.strip().split()[1])
                f.readline()
                hg_members.append(f.readline().strip().split()[1])


def host_downtime():
    if args.duration:
        start_time = int(time.mktime(time.localtime()))
        end_time = int(time.mktime(time.localtime(args.duration)) + start_time)

    for host in args.hosts.split(','):
        if host in h_groups:
            put_in_downtime(2, host, start_time, end_time, args.user, args.comment)
        else:
            put_in_downtime(1, host, start_time, end_time, args.user, args.comment)


def service_downtime():
    if args.duration:
        start_time = int(time.mktime(time.localtime()))
        end_time = int(time.mktime(time.localtime(args.duration)) + start_time)

    for host in args.hosts.split(','):
        if host in h_groups:
            for member in hg_members[h_groups.index(host)].split(','):
                for service in args.services.split(','):
                    put_in_downtime(3, member, start_time, end_time, args.user, args.comment, service)
        else:
            for service in args.services.split(','):
                put_in_downtime(3, host, start_time, end_time, args.user, args.comment, service)

def check_for_host():
    # objects/hosts/*
    pass


def check_for_service():
    # objects/services/*
    pass


def put_in_downtime(cmd, host, start_time, end_time, user, comment, *service):
    now = int(time.mktime(time.localtime()))
    downtime = {
        1: ['SCHEDULE_HOST_DOWNTIME', 'SCHEDULE_HOST_SVC_DOWNTIME'],
        2: ['SCHEDULE_HOSTGROUP_HOST_DOWNTIME','SCHEDULE_HOSTGROUP_SVC_DOWNTIME'],
        3: ['SCHEDULE_SVC_DOWNTIME']
    }

    if cmd == 3:
        ext_cmd = f'[{now}] {downtime[cmd]};{host};{service[0]};{start_time};{end_time};1;0;0;{user};{comment}'
        print(ext_cmd)
    else:
        for i in range(len(downtime[cmd])):
            ext_cmd = f'[{now}] {downtime[cmd][i]};{host};{start_time};{end_time};1;0;0;{user};{comment}'
            print(ext_cmd)


if args.services:
    service_downtime()
else:
    host_downtime()
