#!/usr/bin/python3
import argparse
import time
import glob

# download using this cli command in your home directory
# curl -L https://raw.githubusercontent.com/revpeters/manage_nagios/master/manage_nagios > manage_nagios
# update /usr/bin/python3 to match your python 3 path
# i.e. /usr/bin/python3.6 on sjc-nagios

# TODO
# error check common user typos
# read in comments and services with whitespace chars without the need to be wrapped in ticks
# print output to user when you've completed
# print a list of things you attempted to put into downtime
# print link to downtime page https://{hostname}/nagios/cgi-bin/extinfo.cgi?type=6
# check user running the script and use that as Author if not root or cva
# check if values user is entering exist and return relevant info

# can I grab this from nagios.cfg?
cmd_file = '/local/nagios/var/rw/nagios.cmd'
cfg_path = '/local/nagios/etc/objects/'
host_group_path = cfg_path + 'hostgroups/'

# build the parser
parser = argparse.ArgumentParser(description='Script built to help save time when putting more than one host or service in to downtime')
parser.add_argument('--version', '-v', action='version', version='%(prog)s 1.0')
parser.add_argument('--hosts', '-H', help='Host(s) or hostgroup(s) comma separated', required=True)
parser.add_argument('--services', '-S', help='Service(s) comma separated')
parser.add_argument('--user', '-U', type=str, help='Your Nagios Username', required=True)
parser.add_argument('--comment', '-C', help='Add a comment or ticket number so the team will know what is going on', required=True)

args = parser.parse_args()
h_groups = []
hg_members = []
start_time = int(time.mktime(time.localtime()))
end_time = int(time.mktime(time.localtime(7200)) + start_time)

for files in glob.glob(host_group_path + '*.cfg'):
    with open(files) as cfg:
        for line in cfg:
            if 'hostgroup_name' in line:
                h_groups.append(line.strip().split()[1])
                cfg.readline()
                hg_members.append(cfg.readline().strip().split()[1])


def host_downtime():
    for host in args.hosts.split(','):
        if host in h_groups:
            put_in_downtime(2, host, start_time, end_time, args.user, args.comment)
        else:
            put_in_downtime(1, host, start_time, end_time, args.user, args.comment)


def service_downtime():
    for host in args.hosts.split(','):
        if host in h_groups:
            for member in hg_members[h_groups.index(host)].split(','):
                for service in args.services.split(','):
                    put_in_downtime(3, member, start_time, end_time, args.user, args.comment, service)
        else:
            for service in args.services.split(','):
                put_in_downtime(3, host, start_time, end_time, args.user, args.comment, service)

def check_for_host():
    # objects/hosts/*
    pass


def check_for_service():
    # objects/services/*
    pass


def put_in_downtime(cmd, host, start_time, end_time, user, comment, *service):
    now = int(time.mktime(time.localtime()))
    downtime = {
        1: ['SCHEDULE_HOST_DOWNTIME', 'SCHEDULE_HOST_SVC_DOWNTIME'],
        2: ['SCHEDULE_HOSTGROUP_HOST_DOWNTIME','SCHEDULE_HOSTGROUP_SVC_DOWNTIME'],
        3: ['SCHEDULE_SVC_DOWNTIME']
    }

    #
    if cmd == 3:
        for i in range(len(service)):
            ext_cmd = f'[{now}] {downtime[cmd][0]};{host};{service[i]};{start_time};{end_time};1;0;0;{user};{comment}\n'
            with open(cmd_file, 'w') as f:
                f.write(ext_cmd)
    else:
        for i in range(len(downtime[cmd])):
            ext_cmd = f'[{now}] {downtime[cmd][i]};{host};{start_time};{end_time};1;0;0;{user};{comment}\n'
            with open(cmd_file, 'w') as f:
                f.write(ext_cmd)


if args.services:
    service_downtime()
else:
    host_downtime()
